// -*- C++ -*-
// This is a header file generated with the command:
// makeCMS3ClassFiles("/home/users/phchang/public_html/notes/tracking-note/file.root", "tree", "trktree", "tas", "trk")

#ifndef trktree_H
#define trktree_H

#include "Math/LorentzVector.h"
#include "Math/Point3D.h"
#include "TMath.h"
#include "TBranch.h"
#include "TTree.h"
#include "TH1F.h"
#include "TFile.h"
#include "TBits.h"
#include <vector> 
#include <unistd.h> 
typedef ROOT::Math::LorentzVector< ROOT::Math::PxPyPzE4D<float> > LorentzVector;

using namespace std; 
class trktree {
 private: 
 protected: 
  unsigned int index;
  unsigned long long event_;
  TBranch *event_branch;
  bool     event_isLoaded;
  unsigned int lumi_;
  TBranch *lumi_branch;
  bool     lumi_isLoaded;
  unsigned int run_;
  TBranch *run_branch;
  bool     run_isLoaded;
  vector<float> *trk_px_;
  TBranch *trk_px_branch;
  bool     trk_px_isLoaded;
  vector<float> *trk_py_;
  TBranch *trk_py_branch;
  bool     trk_py_isLoaded;
  vector<float> *trk_pz_;
  TBranch *trk_pz_branch;
  bool     trk_pz_isLoaded;
  vector<float> *trk_pt_;
  TBranch *trk_pt_branch;
  bool     trk_pt_isLoaded;
  vector<float> *trk_inner_px_;
  TBranch *trk_inner_px_branch;
  bool     trk_inner_px_isLoaded;
  vector<float> *trk_inner_py_;
  TBranch *trk_inner_py_branch;
  bool     trk_inner_py_isLoaded;
  vector<float> *trk_inner_pz_;
  TBranch *trk_inner_pz_branch;
  bool     trk_inner_pz_isLoaded;
  vector<float> *trk_inner_pt_;
  TBranch *trk_inner_pt_branch;
  bool     trk_inner_pt_isLoaded;
  vector<float> *trk_outer_px_;
  TBranch *trk_outer_px_branch;
  bool     trk_outer_px_isLoaded;
  vector<float> *trk_outer_py_;
  TBranch *trk_outer_py_branch;
  bool     trk_outer_py_isLoaded;
  vector<float> *trk_outer_pz_;
  TBranch *trk_outer_pz_branch;
  bool     trk_outer_pz_isLoaded;
  vector<float> *trk_outer_pt_;
  TBranch *trk_outer_pt_branch;
  bool     trk_outer_pt_isLoaded;
  vector<float> *trk_eta_;
  TBranch *trk_eta_branch;
  bool     trk_eta_isLoaded;
  vector<float> *trk_lambda_;
  TBranch *trk_lambda_branch;
  bool     trk_lambda_isLoaded;
  vector<float> *trk_cotTheta_;
  TBranch *trk_cotTheta_branch;
  bool     trk_cotTheta_isLoaded;
  vector<float> *trk_phi_;
  TBranch *trk_phi_branch;
  bool     trk_phi_isLoaded;
  vector<float> *trk_dxy_;
  TBranch *trk_dxy_branch;
  bool     trk_dxy_isLoaded;
  vector<float> *trk_dz_;
  TBranch *trk_dz_branch;
  bool     trk_dz_isLoaded;
  vector<float> *trk_dxyPV_;
  TBranch *trk_dxyPV_branch;
  bool     trk_dxyPV_isLoaded;
  vector<float> *trk_dzPV_;
  TBranch *trk_dzPV_branch;
  bool     trk_dzPV_isLoaded;
  vector<float> *trk_dxyClosestPV_;
  TBranch *trk_dxyClosestPV_branch;
  bool     trk_dxyClosestPV_isLoaded;
  vector<float> *trk_dzClosestPV_;
  TBranch *trk_dzClosestPV_branch;
  bool     trk_dzClosestPV_isLoaded;
  vector<float> *trk_ptErr_;
  TBranch *trk_ptErr_branch;
  bool     trk_ptErr_isLoaded;
  vector<float> *trk_etaErr_;
  TBranch *trk_etaErr_branch;
  bool     trk_etaErr_isLoaded;
  vector<float> *trk_lambdaErr_;
  TBranch *trk_lambdaErr_branch;
  bool     trk_lambdaErr_isLoaded;
  vector<float> *trk_phiErr_;
  TBranch *trk_phiErr_branch;
  bool     trk_phiErr_isLoaded;
  vector<float> *trk_dxyErr_;
  TBranch *trk_dxyErr_branch;
  bool     trk_dxyErr_isLoaded;
  vector<float> *trk_dzErr_;
  TBranch *trk_dzErr_branch;
  bool     trk_dzErr_isLoaded;
  vector<float> *trk_refpoint_x_;
  TBranch *trk_refpoint_x_branch;
  bool     trk_refpoint_x_isLoaded;
  vector<float> *trk_refpoint_y_;
  TBranch *trk_refpoint_y_branch;
  bool     trk_refpoint_y_isLoaded;
  vector<float> *trk_refpoint_z_;
  TBranch *trk_refpoint_z_branch;
  bool     trk_refpoint_z_isLoaded;
  vector<float> *trk_nChi2_;
  TBranch *trk_nChi2_branch;
  bool     trk_nChi2_isLoaded;
  vector<float> *trk_nChi2_1Dmod_;
  TBranch *trk_nChi2_1Dmod_branch;
  bool     trk_nChi2_1Dmod_isLoaded;
  vector<float> *trk_ndof_;
  TBranch *trk_ndof_branch;
  bool     trk_ndof_isLoaded;
  vector<float> *trk_mva_;
  TBranch *trk_mva_branch;
  bool     trk_mva_isLoaded;
  vector<int> *trk_q_;
  TBranch *trk_q_branch;
  bool     trk_q_isLoaded;
  vector<unsigned int> *trk_nValid_;
  TBranch *trk_nValid_branch;
  bool     trk_nValid_isLoaded;
  vector<unsigned int> *trk_nLost_;
  TBranch *trk_nLost_branch;
  bool     trk_nLost_isLoaded;
  vector<unsigned int> *trk_nInactive_;
  TBranch *trk_nInactive_branch;
  bool     trk_nInactive_isLoaded;
  vector<unsigned int> *trk_nPixel_;
  TBranch *trk_nPixel_branch;
  bool     trk_nPixel_isLoaded;
  vector<unsigned int> *trk_nStrip_;
  TBranch *trk_nStrip_branch;
  bool     trk_nStrip_isLoaded;
  vector<unsigned int> *trk_nOuterLost_;
  TBranch *trk_nOuterLost_branch;
  bool     trk_nOuterLost_isLoaded;
  vector<unsigned int> *trk_nInnerLost_;
  TBranch *trk_nInnerLost_branch;
  bool     trk_nInnerLost_isLoaded;
  vector<unsigned int> *trk_nOuterInactive_;
  TBranch *trk_nOuterInactive_branch;
  bool     trk_nOuterInactive_isLoaded;
  vector<unsigned int> *trk_nInnerInactive_;
  TBranch *trk_nInnerInactive_branch;
  bool     trk_nInnerInactive_isLoaded;
  vector<unsigned int> *trk_nPixelLay_;
  TBranch *trk_nPixelLay_branch;
  bool     trk_nPixelLay_isLoaded;
  vector<unsigned int> *trk_nStripLay_;
  TBranch *trk_nStripLay_branch;
  bool     trk_nStripLay_isLoaded;
  vector<unsigned int> *trk_n3DLay_;
  TBranch *trk_n3DLay_branch;
  bool     trk_n3DLay_isLoaded;
  vector<unsigned int> *trk_nLostLay_;
  TBranch *trk_nLostLay_branch;
  bool     trk_nLostLay_isLoaded;
  vector<unsigned int> *trk_nCluster_;
  TBranch *trk_nCluster_branch;
  bool     trk_nCluster_isLoaded;
  vector<unsigned int> *trk_algo_;
  TBranch *trk_algo_branch;
  bool     trk_algo_isLoaded;
  vector<unsigned int> *trk_originalAlgo_;
  TBranch *trk_originalAlgo_branch;
  bool     trk_originalAlgo_isLoaded;
  vector<int> *trk_seedIdx_;
  TBranch *trk_seedIdx_branch;
  bool     trk_seedIdx_isLoaded;
  vector<int> *trk_vtxIdx_;
  TBranch *trk_vtxIdx_branch;
  bool     trk_vtxIdx_isLoaded;
  vector<vector<int> > *trk_simTrkIdx_;
  TBranch *trk_simTrkIdx_branch;
  bool     trk_simTrkIdx_isLoaded;
  vector<vector<float> > *trk_simTrkShareFrac_;
  TBranch *trk_simTrkShareFrac_branch;
  bool     trk_simTrkShareFrac_isLoaded;
  vector<vector<float> > *trk_simTrkNChi2_;
  TBranch *trk_simTrkNChi2_branch;
  bool     trk_simTrkNChi2_isLoaded;
  vector<int> *trk_bestSimTrkIdx_;
  TBranch *trk_bestSimTrkIdx_branch;
  bool     trk_bestSimTrkIdx_isLoaded;
  vector<int> *trk_bestFromFirstHitSimTrkIdx_;
  TBranch *trk_bestFromFirstHitSimTrkIdx_branch;
  bool     trk_bestFromFirstHitSimTrkIdx_isLoaded;
  vector<float> *trk_bestSimTrkShareFrac_;
  TBranch *trk_bestSimTrkShareFrac_branch;
  bool     trk_bestSimTrkShareFrac_isLoaded;
  vector<float> *trk_bestSimTrkShareFracSimDenom_;
  TBranch *trk_bestSimTrkShareFracSimDenom_branch;
  bool     trk_bestSimTrkShareFracSimDenom_isLoaded;
  vector<float> *trk_bestSimTrkShareFracSimClusterDenom_;
  TBranch *trk_bestSimTrkShareFracSimClusterDenom_branch;
  bool     trk_bestSimTrkShareFracSimClusterDenom_isLoaded;
  vector<float> *trk_bestSimTrkNChi2_;
  TBranch *trk_bestSimTrkNChi2_branch;
  bool     trk_bestSimTrkNChi2_isLoaded;
  vector<float> *trk_bestFromFirstHitSimTrkShareFrac_;
  TBranch *trk_bestFromFirstHitSimTrkShareFrac_branch;
  bool     trk_bestFromFirstHitSimTrkShareFrac_isLoaded;
  vector<float> *trk_bestFromFirstHitSimTrkShareFracSimDenom_;
  TBranch *trk_bestFromFirstHitSimTrkShareFracSimDenom_branch;
  bool     trk_bestFromFirstHitSimTrkShareFracSimDenom_isLoaded;
  vector<float> *trk_bestFromFirstHitSimTrkShareFracSimClusterDenom_;
  TBranch *trk_bestFromFirstHitSimTrkShareFracSimClusterDenom_branch;
  bool     trk_bestFromFirstHitSimTrkShareFracSimClusterDenom_isLoaded;
  vector<float> *trk_bestFromFirstHitSimTrkNChi2_;
  TBranch *trk_bestFromFirstHitSimTrkNChi2_branch;
  bool     trk_bestFromFirstHitSimTrkNChi2_isLoaded;
  vector<vector<int> > *trk_hitIdx_;
  TBranch *trk_hitIdx_branch;
  bool     trk_hitIdx_isLoaded;
  vector<vector<int> > *trk_hitType_;
  TBranch *trk_hitType_branch;
  bool     trk_hitType_isLoaded;
  vector<int> *sim_event_;
  TBranch *sim_event_branch;
  bool     sim_event_isLoaded;
  vector<int> *sim_bunchCrossing_;
  TBranch *sim_bunchCrossing_branch;
  bool     sim_bunchCrossing_isLoaded;
  vector<int> *sim_pdgId_;
  TBranch *sim_pdgId_branch;
  bool     sim_pdgId_isLoaded;
  vector<vector<int> > *sim_genPdgIds_;
  TBranch *sim_genPdgIds_branch;
  bool     sim_genPdgIds_isLoaded;
  vector<int> *sim_isFromBHadron_;
  TBranch *sim_isFromBHadron_branch;
  bool     sim_isFromBHadron_isLoaded;
  vector<float> *sim_px_;
  TBranch *sim_px_branch;
  bool     sim_px_isLoaded;
  vector<float> *sim_py_;
  TBranch *sim_py_branch;
  bool     sim_py_isLoaded;
  vector<float> *sim_pz_;
  TBranch *sim_pz_branch;
  bool     sim_pz_isLoaded;
  vector<float> *sim_pt_;
  TBranch *sim_pt_branch;
  bool     sim_pt_isLoaded;
  vector<float> *sim_eta_;
  TBranch *sim_eta_branch;
  bool     sim_eta_isLoaded;
  vector<float> *sim_phi_;
  TBranch *sim_phi_branch;
  bool     sim_phi_isLoaded;
  vector<float> *sim_pca_pt_;
  TBranch *sim_pca_pt_branch;
  bool     sim_pca_pt_isLoaded;
  vector<float> *sim_pca_eta_;
  TBranch *sim_pca_eta_branch;
  bool     sim_pca_eta_isLoaded;
  vector<float> *sim_pca_lambda_;
  TBranch *sim_pca_lambda_branch;
  bool     sim_pca_lambda_isLoaded;
  vector<float> *sim_pca_cotTheta_;
  TBranch *sim_pca_cotTheta_branch;
  bool     sim_pca_cotTheta_isLoaded;
  vector<float> *sim_pca_phi_;
  TBranch *sim_pca_phi_branch;
  bool     sim_pca_phi_isLoaded;
  vector<float> *sim_pca_dxy_;
  TBranch *sim_pca_dxy_branch;
  bool     sim_pca_dxy_isLoaded;
  vector<float> *sim_pca_dz_;
  TBranch *sim_pca_dz_branch;
  bool     sim_pca_dz_isLoaded;
  vector<int> *sim_q_;
  TBranch *sim_q_branch;
  bool     sim_q_isLoaded;
  vector<unsigned int> *sim_nValid_;
  TBranch *sim_nValid_branch;
  bool     sim_nValid_isLoaded;
  vector<unsigned int> *sim_nPixel_;
  TBranch *sim_nPixel_branch;
  bool     sim_nPixel_isLoaded;
  vector<unsigned int> *sim_nStrip_;
  TBranch *sim_nStrip_branch;
  bool     sim_nStrip_isLoaded;
  vector<unsigned int> *sim_nLay_;
  TBranch *sim_nLay_branch;
  bool     sim_nLay_isLoaded;
  vector<unsigned int> *sim_nPixelLay_;
  TBranch *sim_nPixelLay_branch;
  bool     sim_nPixelLay_isLoaded;
  vector<unsigned int> *sim_n3DLay_;
  TBranch *sim_n3DLay_branch;
  bool     sim_n3DLay_isLoaded;
  vector<unsigned int> *sim_nTrackerHits_;
  TBranch *sim_nTrackerHits_branch;
  bool     sim_nTrackerHits_isLoaded;
  vector<unsigned int> *sim_nRecoClusters_;
  TBranch *sim_nRecoClusters_branch;
  bool     sim_nRecoClusters_isLoaded;
  vector<vector<int> > *sim_trkIdx_;
  TBranch *sim_trkIdx_branch;
  bool     sim_trkIdx_isLoaded;
  vector<vector<float> > *sim_trkShareFrac_;
  TBranch *sim_trkShareFrac_branch;
  bool     sim_trkShareFrac_isLoaded;
  vector<vector<int> > *sim_seedIdx_;
  TBranch *sim_seedIdx_branch;
  bool     sim_seedIdx_isLoaded;
  vector<int> *sim_parentVtxIdx_;
  TBranch *sim_parentVtxIdx_branch;
  bool     sim_parentVtxIdx_isLoaded;
  vector<vector<int> > *sim_decayVtxIdx_;
  TBranch *sim_decayVtxIdx_branch;
  bool     sim_decayVtxIdx_isLoaded;
  vector<vector<int> > *sim_simHitIdx_;
  TBranch *sim_simHitIdx_branch;
  bool     sim_simHitIdx_isLoaded;
  vector<unsigned int> *pix_detId_;
  TBranch *pix_detId_branch;
  bool     pix_detId_isLoaded;
  vector<vector<int> > *pix_trkIdx_;
  TBranch *pix_trkIdx_branch;
  bool     pix_trkIdx_isLoaded;
  vector<vector<int> > *pix_seeIdx_;
  TBranch *pix_seeIdx_branch;
  bool     pix_seeIdx_isLoaded;
  vector<vector<int> > *pix_simHitIdx_;
  TBranch *pix_simHitIdx_branch;
  bool     pix_simHitIdx_isLoaded;
  vector<vector<float> > *pix_xySignificance_;
  TBranch *pix_xySignificance_branch;
  bool     pix_xySignificance_isLoaded;
  vector<vector<float> > *pix_chargeFraction_;
  TBranch *pix_chargeFraction_branch;
  bool     pix_chargeFraction_isLoaded;
  vector<float> *pix_x_;
  TBranch *pix_x_branch;
  bool     pix_x_isLoaded;
  vector<float> *pix_y_;
  TBranch *pix_y_branch;
  bool     pix_y_isLoaded;
  vector<float> *pix_z_;
  TBranch *pix_z_branch;
  bool     pix_z_isLoaded;
  vector<float> *pix_xx_;
  TBranch *pix_xx_branch;
  bool     pix_xx_isLoaded;
  vector<float> *pix_xy_;
  TBranch *pix_xy_branch;
  bool     pix_xy_isLoaded;
  vector<float> *pix_yy_;
  TBranch *pix_yy_branch;
  bool     pix_yy_isLoaded;
  vector<float> *pix_yz_;
  TBranch *pix_yz_branch;
  bool     pix_yz_isLoaded;
  vector<float> *pix_zz_;
  TBranch *pix_zz_branch;
  bool     pix_zz_isLoaded;
  vector<float> *pix_zx_;
  TBranch *pix_zx_branch;
  bool     pix_zx_isLoaded;
  vector<float> *pix_radL_;
  TBranch *pix_radL_branch;
  bool     pix_radL_isLoaded;
  vector<float> *pix_bbxi_;
  TBranch *pix_bbxi_branch;
  bool     pix_bbxi_isLoaded;
  vector<unsigned int> *ph2_detId_;
  TBranch *ph2_detId_branch;
  bool     ph2_detId_isLoaded;
  vector<vector<int> > *ph2_trkIdx_;
  TBranch *ph2_trkIdx_branch;
  bool     ph2_trkIdx_isLoaded;
  vector<vector<int> > *ph2_seeIdx_;
  TBranch *ph2_seeIdx_branch;
  bool     ph2_seeIdx_isLoaded;
  vector<vector<int> > *ph2_simHitIdx_;
  TBranch *ph2_simHitIdx_branch;
  bool     ph2_simHitIdx_isLoaded;
  vector<vector<float> > *ph2_xySignificance_;
  TBranch *ph2_xySignificance_branch;
  bool     ph2_xySignificance_isLoaded;
  vector<float> *ph2_x_;
  TBranch *ph2_x_branch;
  bool     ph2_x_isLoaded;
  vector<float> *ph2_y_;
  TBranch *ph2_y_branch;
  bool     ph2_y_isLoaded;
  vector<float> *ph2_z_;
  TBranch *ph2_z_branch;
  bool     ph2_z_isLoaded;
  vector<float> *ph2_xx_;
  TBranch *ph2_xx_branch;
  bool     ph2_xx_isLoaded;
  vector<float> *ph2_xy_;
  TBranch *ph2_xy_branch;
  bool     ph2_xy_isLoaded;
  vector<float> *ph2_yy_;
  TBranch *ph2_yy_branch;
  bool     ph2_yy_isLoaded;
  vector<float> *ph2_yz_;
  TBranch *ph2_yz_branch;
  bool     ph2_yz_isLoaded;
  vector<float> *ph2_zz_;
  TBranch *ph2_zz_branch;
  bool     ph2_zz_isLoaded;
  vector<float> *ph2_zx_;
  TBranch *ph2_zx_branch;
  bool     ph2_zx_isLoaded;
  vector<float> *ph2_radL_;
  TBranch *ph2_radL_branch;
  bool     ph2_radL_isLoaded;
  vector<float> *ph2_bbxi_;
  TBranch *ph2_bbxi_branch;
  bool     ph2_bbxi_isLoaded;
  vector<unsigned int> *inv_detId_;
  TBranch *inv_detId_branch;
  bool     inv_detId_isLoaded;
  vector<unsigned int> *simhit_detId_;
  TBranch *simhit_detId_branch;
  bool     simhit_detId_isLoaded;
  vector<float> *simhit_x_;
  TBranch *simhit_x_branch;
  bool     simhit_x_isLoaded;
  vector<float> *simhit_y_;
  TBranch *simhit_y_branch;
  bool     simhit_y_isLoaded;
  vector<float> *simhit_z_;
  TBranch *simhit_z_branch;
  bool     simhit_z_isLoaded;
  vector<float> *simhit_px_;
  TBranch *simhit_px_branch;
  bool     simhit_px_isLoaded;
  vector<float> *simhit_py_;
  TBranch *simhit_py_branch;
  bool     simhit_py_isLoaded;
  vector<float> *simhit_pz_;
  TBranch *simhit_pz_branch;
  bool     simhit_pz_isLoaded;
  vector<int> *simhit_particle_;
  TBranch *simhit_particle_branch;
  bool     simhit_particle_isLoaded;
  vector<float> *simhit_eloss_;
  TBranch *simhit_eloss_branch;
  bool     simhit_eloss_isLoaded;
  vector<float> *simhit_tof_;
  TBranch *simhit_tof_branch;
  bool     simhit_tof_isLoaded;
  vector<int> *simhit_simTrkIdx_;
  TBranch *simhit_simTrkIdx_branch;
  bool     simhit_simTrkIdx_isLoaded;
  vector<vector<int> > *simhit_hitIdx_;
  TBranch *simhit_hitIdx_branch;
  bool     simhit_hitIdx_isLoaded;
  vector<vector<int> > *simhit_hitType_;
  TBranch *simhit_hitType_branch;
  bool     simhit_hitType_isLoaded;
  float    bsp_x_;
  TBranch *bsp_x_branch;
  bool     bsp_x_isLoaded;
  float    bsp_y_;
  TBranch *bsp_y_branch;
  bool     bsp_y_isLoaded;
  float    bsp_z_;
  TBranch *bsp_z_branch;
  bool     bsp_z_isLoaded;
  float    bsp_sigmax_;
  TBranch *bsp_sigmax_branch;
  bool     bsp_sigmax_isLoaded;
  float    bsp_sigmay_;
  TBranch *bsp_sigmay_branch;
  bool     bsp_sigmay_isLoaded;
  float    bsp_sigmaz_;
  TBranch *bsp_sigmaz_branch;
  bool     bsp_sigmaz_isLoaded;
  vector<float> *see_px_;
  TBranch *see_px_branch;
  bool     see_px_isLoaded;
  vector<float> *see_py_;
  TBranch *see_py_branch;
  bool     see_py_isLoaded;
  vector<float> *see_pz_;
  TBranch *see_pz_branch;
  bool     see_pz_isLoaded;
  vector<float> *see_pt_;
  TBranch *see_pt_branch;
  bool     see_pt_isLoaded;
  vector<float> *see_eta_;
  TBranch *see_eta_branch;
  bool     see_eta_isLoaded;
  vector<float> *see_phi_;
  TBranch *see_phi_branch;
  bool     see_phi_isLoaded;
  vector<float> *see_dxy_;
  TBranch *see_dxy_branch;
  bool     see_dxy_isLoaded;
  vector<float> *see_dz_;
  TBranch *see_dz_branch;
  bool     see_dz_isLoaded;
  vector<float> *see_ptErr_;
  TBranch *see_ptErr_branch;
  bool     see_ptErr_isLoaded;
  vector<float> *see_etaErr_;
  TBranch *see_etaErr_branch;
  bool     see_etaErr_isLoaded;
  vector<float> *see_phiErr_;
  TBranch *see_phiErr_branch;
  bool     see_phiErr_isLoaded;
  vector<float> *see_dxyErr_;
  TBranch *see_dxyErr_branch;
  bool     see_dxyErr_isLoaded;
  vector<float> *see_dzErr_;
  TBranch *see_dzErr_branch;
  bool     see_dzErr_isLoaded;
  vector<float> *see_chi2_;
  TBranch *see_chi2_branch;
  bool     see_chi2_isLoaded;
  vector<float> *see_statePt_;
  TBranch *see_statePt_branch;
  bool     see_statePt_isLoaded;
  vector<float> *see_stateTrajX_;
  TBranch *see_stateTrajX_branch;
  bool     see_stateTrajX_isLoaded;
  vector<float> *see_stateTrajY_;
  TBranch *see_stateTrajY_branch;
  bool     see_stateTrajY_isLoaded;
  vector<float> *see_stateTrajPx_;
  TBranch *see_stateTrajPx_branch;
  bool     see_stateTrajPx_isLoaded;
  vector<float> *see_stateTrajPy_;
  TBranch *see_stateTrajPy_branch;
  bool     see_stateTrajPy_isLoaded;
  vector<float> *see_stateTrajPz_;
  TBranch *see_stateTrajPz_branch;
  bool     see_stateTrajPz_isLoaded;
  vector<float> *see_stateTrajGlbX_;
  TBranch *see_stateTrajGlbX_branch;
  bool     see_stateTrajGlbX_isLoaded;
  vector<float> *see_stateTrajGlbY_;
  TBranch *see_stateTrajGlbY_branch;
  bool     see_stateTrajGlbY_isLoaded;
  vector<float> *see_stateTrajGlbZ_;
  TBranch *see_stateTrajGlbZ_branch;
  bool     see_stateTrajGlbZ_isLoaded;
  vector<float> *see_stateTrajGlbPx_;
  TBranch *see_stateTrajGlbPx_branch;
  bool     see_stateTrajGlbPx_isLoaded;
  vector<float> *see_stateTrajGlbPy_;
  TBranch *see_stateTrajGlbPy_branch;
  bool     see_stateTrajGlbPy_isLoaded;
  vector<float> *see_stateTrajGlbPz_;
  TBranch *see_stateTrajGlbPz_branch;
  bool     see_stateTrajGlbPz_isLoaded;
  vector<float> *see_stateCcov00_;
  TBranch *see_stateCcov00_branch;
  bool     see_stateCcov00_isLoaded;
  vector<float> *see_stateCcov01_;
  TBranch *see_stateCcov01_branch;
  bool     see_stateCcov01_isLoaded;
  vector<float> *see_stateCcov02_;
  TBranch *see_stateCcov02_branch;
  bool     see_stateCcov02_isLoaded;
  vector<float> *see_stateCcov03_;
  TBranch *see_stateCcov03_branch;
  bool     see_stateCcov03_isLoaded;
  vector<float> *see_stateCcov04_;
  TBranch *see_stateCcov04_branch;
  bool     see_stateCcov04_isLoaded;
  vector<float> *see_stateCcov05_;
  TBranch *see_stateCcov05_branch;
  bool     see_stateCcov05_isLoaded;
  vector<float> *see_stateCcov11_;
  TBranch *see_stateCcov11_branch;
  bool     see_stateCcov11_isLoaded;
  vector<float> *see_stateCcov12_;
  TBranch *see_stateCcov12_branch;
  bool     see_stateCcov12_isLoaded;
  vector<float> *see_stateCcov13_;
  TBranch *see_stateCcov13_branch;
  bool     see_stateCcov13_isLoaded;
  vector<float> *see_stateCcov14_;
  TBranch *see_stateCcov14_branch;
  bool     see_stateCcov14_isLoaded;
  vector<float> *see_stateCcov15_;
  TBranch *see_stateCcov15_branch;
  bool     see_stateCcov15_isLoaded;
  vector<float> *see_stateCcov22_;
  TBranch *see_stateCcov22_branch;
  bool     see_stateCcov22_isLoaded;
  vector<float> *see_stateCcov23_;
  TBranch *see_stateCcov23_branch;
  bool     see_stateCcov23_isLoaded;
  vector<float> *see_stateCcov24_;
  TBranch *see_stateCcov24_branch;
  bool     see_stateCcov24_isLoaded;
  vector<float> *see_stateCcov25_;
  TBranch *see_stateCcov25_branch;
  bool     see_stateCcov25_isLoaded;
  vector<float> *see_stateCcov33_;
  TBranch *see_stateCcov33_branch;
  bool     see_stateCcov33_isLoaded;
  vector<float> *see_stateCcov34_;
  TBranch *see_stateCcov34_branch;
  bool     see_stateCcov34_isLoaded;
  vector<float> *see_stateCcov35_;
  TBranch *see_stateCcov35_branch;
  bool     see_stateCcov35_isLoaded;
  vector<float> *see_stateCcov44_;
  TBranch *see_stateCcov44_branch;
  bool     see_stateCcov44_isLoaded;
  vector<float> *see_stateCcov45_;
  TBranch *see_stateCcov45_branch;
  bool     see_stateCcov45_isLoaded;
  vector<float> *see_stateCcov55_;
  TBranch *see_stateCcov55_branch;
  bool     see_stateCcov55_isLoaded;
  vector<int> *see_q_;
  TBranch *see_q_branch;
  bool     see_q_isLoaded;
  vector<unsigned int> *see_nValid_;
  TBranch *see_nValid_branch;
  bool     see_nValid_isLoaded;
  vector<unsigned int> *see_nPixel_;
  TBranch *see_nPixel_branch;
  bool     see_nPixel_isLoaded;
  vector<unsigned int> *see_nGlued_;
  TBranch *see_nGlued_branch;
  bool     see_nGlued_isLoaded;
  vector<unsigned int> *see_nStrip_;
  TBranch *see_nStrip_branch;
  bool     see_nStrip_isLoaded;
  vector<unsigned int> *see_nPhase2OT_;
  TBranch *see_nPhase2OT_branch;
  bool     see_nPhase2OT_isLoaded;
  vector<unsigned int> *see_nCluster_;
  TBranch *see_nCluster_branch;
  bool     see_nCluster_isLoaded;
  vector<unsigned int> *see_algo_;
  TBranch *see_algo_branch;
  bool     see_algo_isLoaded;
  vector<int> *see_trkIdx_;
  TBranch *see_trkIdx_branch;
  bool     see_trkIdx_isLoaded;
  vector<vector<int> > *see_simTrkIdx_;
  TBranch *see_simTrkIdx_branch;
  bool     see_simTrkIdx_isLoaded;
  vector<vector<float> > *see_simTrkShareFrac_;
  TBranch *see_simTrkShareFrac_branch;
  bool     see_simTrkShareFrac_isLoaded;
  vector<int> *see_bestSimTrkIdx_;
  TBranch *see_bestSimTrkIdx_branch;
  bool     see_bestSimTrkIdx_isLoaded;
  vector<int> *see_bestFromFirstHitSimTrkIdx_;
  TBranch *see_bestFromFirstHitSimTrkIdx_branch;
  bool     see_bestFromFirstHitSimTrkIdx_isLoaded;
  vector<float> *see_bestSimTrkShareFrac_;
  TBranch *see_bestSimTrkShareFrac_branch;
  bool     see_bestSimTrkShareFrac_isLoaded;
  vector<float> *see_bestFromFirstHitSimTrkShareFrac_;
  TBranch *see_bestFromFirstHitSimTrkShareFrac_branch;
  bool     see_bestFromFirstHitSimTrkShareFrac_isLoaded;
  vector<vector<int> > *see_hitIdx_;
  TBranch *see_hitIdx_branch;
  bool     see_hitIdx_isLoaded;
  vector<vector<int> > *see_hitType_;
  TBranch *see_hitType_branch;
  bool     see_hitType_isLoaded;
  vector<unsigned int> *see_offset_;
  TBranch *see_offset_branch;
  bool     see_offset_isLoaded;
  vector<float> *vtx_x_;
  TBranch *vtx_x_branch;
  bool     vtx_x_isLoaded;
  vector<float> *vtx_y_;
  TBranch *vtx_y_branch;
  bool     vtx_y_isLoaded;
  vector<float> *vtx_z_;
  TBranch *vtx_z_branch;
  bool     vtx_z_isLoaded;
  vector<float> *vtx_xErr_;
  TBranch *vtx_xErr_branch;
  bool     vtx_xErr_isLoaded;
  vector<float> *vtx_yErr_;
  TBranch *vtx_yErr_branch;
  bool     vtx_yErr_isLoaded;
  vector<float> *vtx_zErr_;
  TBranch *vtx_zErr_branch;
  bool     vtx_zErr_isLoaded;
  vector<float> *vtx_ndof_;
  TBranch *vtx_ndof_branch;
  bool     vtx_ndof_isLoaded;
  vector<float> *vtx_chi2_;
  TBranch *vtx_chi2_branch;
  bool     vtx_chi2_isLoaded;
  vector<vector<int> > *vtx_trkIdx_;
  TBranch *vtx_trkIdx_branch;
  bool     vtx_trkIdx_isLoaded;
  vector<int> *simvtx_event_;
  TBranch *simvtx_event_branch;
  bool     simvtx_event_isLoaded;
  vector<int> *simvtx_bunchCrossing_;
  TBranch *simvtx_bunchCrossing_branch;
  bool     simvtx_bunchCrossing_isLoaded;
  vector<unsigned int> *simvtx_processType_;
  TBranch *simvtx_processType_branch;
  bool     simvtx_processType_isLoaded;
  vector<float> *simvtx_x_;
  TBranch *simvtx_x_branch;
  bool     simvtx_x_isLoaded;
  vector<float> *simvtx_y_;
  TBranch *simvtx_y_branch;
  bool     simvtx_y_isLoaded;
  vector<float> *simvtx_z_;
  TBranch *simvtx_z_branch;
  bool     simvtx_z_isLoaded;
  vector<vector<int> > *simvtx_sourceSimIdx_;
  TBranch *simvtx_sourceSimIdx_branch;
  bool     simvtx_sourceSimIdx_isLoaded;
  vector<vector<int> > *simvtx_daughterSimIdx_;
  TBranch *simvtx_daughterSimIdx_branch;
  bool     simvtx_daughterSimIdx_isLoaded;
  vector<int> *simpv_idx_;
  TBranch *simpv_idx_branch;
  bool     simpv_idx_isLoaded;
public: 
void Init(TTree *tree);
void GetEntry(unsigned int idx); 
void LoadAllBranches(); 
  const unsigned long long &event();
  const unsigned int &lumi();
  const unsigned int &run();
  const vector<float> &trk_px();
  const vector<float> &trk_py();
  const vector<float> &trk_pz();
  const vector<float> &trk_pt();
  const vector<float> &trk_inner_px();
  const vector<float> &trk_inner_py();
  const vector<float> &trk_inner_pz();
  const vector<float> &trk_inner_pt();
  const vector<float> &trk_outer_px();
  const vector<float> &trk_outer_py();
  const vector<float> &trk_outer_pz();
  const vector<float> &trk_outer_pt();
  const vector<float> &trk_eta();
  const vector<float> &trk_lambda();
  const vector<float> &trk_cotTheta();
  const vector<float> &trk_phi();
  const vector<float> &trk_dxy();
  const vector<float> &trk_dz();
  const vector<float> &trk_dxyPV();
  const vector<float> &trk_dzPV();
  const vector<float> &trk_dxyClosestPV();
  const vector<float> &trk_dzClosestPV();
  const vector<float> &trk_ptErr();
  const vector<float> &trk_etaErr();
  const vector<float> &trk_lambdaErr();
  const vector<float> &trk_phiErr();
  const vector<float> &trk_dxyErr();
  const vector<float> &trk_dzErr();
  const vector<float> &trk_refpoint_x();
  const vector<float> &trk_refpoint_y();
  const vector<float> &trk_refpoint_z();
  const vector<float> &trk_nChi2();
  const vector<float> &trk_nChi2_1Dmod();
  const vector<float> &trk_ndof();
  const vector<float> &trk_mva();
  const vector<int> &trk_q();
  const vector<unsigned int> &trk_nValid();
  const vector<unsigned int> &trk_nLost();
  const vector<unsigned int> &trk_nInactive();
  const vector<unsigned int> &trk_nPixel();
  const vector<unsigned int> &trk_nStrip();
  const vector<unsigned int> &trk_nOuterLost();
  const vector<unsigned int> &trk_nInnerLost();
  const vector<unsigned int> &trk_nOuterInactive();
  const vector<unsigned int> &trk_nInnerInactive();
  const vector<unsigned int> &trk_nPixelLay();
  const vector<unsigned int> &trk_nStripLay();
  const vector<unsigned int> &trk_n3DLay();
  const vector<unsigned int> &trk_nLostLay();
  const vector<unsigned int> &trk_nCluster();
  const vector<unsigned int> &trk_algo();
  const vector<unsigned int> &trk_originalAlgo();
  const vector<int> &trk_seedIdx();
  const vector<int> &trk_vtxIdx();
  const vector<vector<int> > &trk_simTrkIdx();
  const vector<vector<float> > &trk_simTrkShareFrac();
  const vector<vector<float> > &trk_simTrkNChi2();
  const vector<int> &trk_bestSimTrkIdx();
  const vector<int> &trk_bestFromFirstHitSimTrkIdx();
  const vector<float> &trk_bestSimTrkShareFrac();
  const vector<float> &trk_bestSimTrkShareFracSimDenom();
  const vector<float> &trk_bestSimTrkShareFracSimClusterDenom();
  const vector<float> &trk_bestSimTrkNChi2();
  const vector<float> &trk_bestFromFirstHitSimTrkShareFrac();
  const vector<float> &trk_bestFromFirstHitSimTrkShareFracSimDenom();
  const vector<float> &trk_bestFromFirstHitSimTrkShareFracSimClusterDenom();
  const vector<float> &trk_bestFromFirstHitSimTrkNChi2();
  const vector<vector<int> > &trk_hitIdx();
  const vector<vector<int> > &trk_hitType();
  const vector<int> &sim_event();
  const vector<int> &sim_bunchCrossing();
  const vector<int> &sim_pdgId();
  const vector<vector<int> > &sim_genPdgIds();
  const vector<int> &sim_isFromBHadron();
  const vector<float> &sim_px();
  const vector<float> &sim_py();
  const vector<float> &sim_pz();
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_pt();
  const vector<float> &sim_pca_eta();
  const vector<float> &sim_pca_lambda();
  const vector<float> &sim_pca_cotTheta();
  const vector<float> &sim_pca_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<unsigned int> &sim_nValid();
  const vector<unsigned int> &sim_nPixel();
  const vector<unsigned int> &sim_nStrip();
  const vector<unsigned int> &sim_nLay();
  const vector<unsigned int> &sim_nPixelLay();
  const vector<unsigned int> &sim_n3DLay();
  const vector<unsigned int> &sim_nTrackerHits();
  const vector<unsigned int> &sim_nRecoClusters();
  const vector<vector<int> > &sim_trkIdx();
  const vector<vector<float> > &sim_trkShareFrac();
  const vector<vector<int> > &sim_seedIdx();
  const vector<int> &sim_parentVtxIdx();
  const vector<vector<int> > &sim_decayVtxIdx();
  const vector<vector<int> > &sim_simHitIdx();
  const vector<unsigned int> &pix_detId();
  const vector<vector<int> > &pix_trkIdx();
  const vector<vector<int> > &pix_seeIdx();
  const vector<vector<int> > &pix_simHitIdx();
  const vector<vector<float> > &pix_xySignificance();
  const vector<vector<float> > &pix_chargeFraction();
  const vector<float> &pix_x();
  const vector<float> &pix_y();
  const vector<float> &pix_z();
  const vector<float> &pix_xx();
  const vector<float> &pix_xy();
  const vector<float> &pix_yy();
  const vector<float> &pix_yz();
  const vector<float> &pix_zz();
  const vector<float> &pix_zx();
  const vector<float> &pix_radL();
  const vector<float> &pix_bbxi();
  const vector<unsigned int> &ph2_detId();
  const vector<vector<int> > &ph2_trkIdx();
  const vector<vector<int> > &ph2_seeIdx();
  const vector<vector<int> > &ph2_simHitIdx();
  const vector<vector<float> > &ph2_xySignificance();
  const vector<float> &ph2_x();
  const vector<float> &ph2_y();
  const vector<float> &ph2_z();
  const vector<float> &ph2_xx();
  const vector<float> &ph2_xy();
  const vector<float> &ph2_yy();
  const vector<float> &ph2_yz();
  const vector<float> &ph2_zz();
  const vector<float> &ph2_zx();
  const vector<float> &ph2_radL();
  const vector<float> &ph2_bbxi();
  const vector<unsigned int> &inv_detId();
  const vector<unsigned int> &simhit_detId();
  const vector<float> &simhit_x();
  const vector<float> &simhit_y();
  const vector<float> &simhit_z();
  const vector<float> &simhit_px();
  const vector<float> &simhit_py();
  const vector<float> &simhit_pz();
  const vector<int> &simhit_particle();
  const vector<float> &simhit_eloss();
  const vector<float> &simhit_tof();
  const vector<int> &simhit_simTrkIdx();
  const vector<vector<int> > &simhit_hitIdx();
  const vector<vector<int> > &simhit_hitType();
  const float &bsp_x();
  const float &bsp_y();
  const float &bsp_z();
  const float &bsp_sigmax();
  const float &bsp_sigmay();
  const float &bsp_sigmaz();
  const vector<float> &see_px();
  const vector<float> &see_py();
  const vector<float> &see_pz();
  const vector<float> &see_pt();
  const vector<float> &see_eta();
  const vector<float> &see_phi();
  const vector<float> &see_dxy();
  const vector<float> &see_dz();
  const vector<float> &see_ptErr();
  const vector<float> &see_etaErr();
  const vector<float> &see_phiErr();
  const vector<float> &see_dxyErr();
  const vector<float> &see_dzErr();
  const vector<float> &see_chi2();
  const vector<float> &see_statePt();
  const vector<float> &see_stateTrajX();
  const vector<float> &see_stateTrajY();
  const vector<float> &see_stateTrajPx();
  const vector<float> &see_stateTrajPy();
  const vector<float> &see_stateTrajPz();
  const vector<float> &see_stateTrajGlbX();
  const vector<float> &see_stateTrajGlbY();
  const vector<float> &see_stateTrajGlbZ();
  const vector<float> &see_stateTrajGlbPx();
  const vector<float> &see_stateTrajGlbPy();
  const vector<float> &see_stateTrajGlbPz();
  const vector<float> &see_stateCcov00();
  const vector<float> &see_stateCcov01();
  const vector<float> &see_stateCcov02();
  const vector<float> &see_stateCcov03();
  const vector<float> &see_stateCcov04();
  const vector<float> &see_stateCcov05();
  const vector<float> &see_stateCcov11();
  const vector<float> &see_stateCcov12();
  const vector<float> &see_stateCcov13();
  const vector<float> &see_stateCcov14();
  const vector<float> &see_stateCcov15();
  const vector<float> &see_stateCcov22();
  const vector<float> &see_stateCcov23();
  const vector<float> &see_stateCcov24();
  const vector<float> &see_stateCcov25();
  const vector<float> &see_stateCcov33();
  const vector<float> &see_stateCcov34();
  const vector<float> &see_stateCcov35();
  const vector<float> &see_stateCcov44();
  const vector<float> &see_stateCcov45();
  const vector<float> &see_stateCcov55();
  const vector<int> &see_q();
  const vector<unsigned int> &see_nValid();
  const vector<unsigned int> &see_nPixel();
  const vector<unsigned int> &see_nGlued();
  const vector<unsigned int> &see_nStrip();
  const vector<unsigned int> &see_nPhase2OT();
  const vector<unsigned int> &see_nCluster();
  const vector<unsigned int> &see_algo();
  const vector<int> &see_trkIdx();
  const vector<vector<int> > &see_simTrkIdx();
  const vector<vector<float> > &see_simTrkShareFrac();
  const vector<int> &see_bestSimTrkIdx();
  const vector<int> &see_bestFromFirstHitSimTrkIdx();
  const vector<float> &see_bestSimTrkShareFrac();
  const vector<float> &see_bestFromFirstHitSimTrkShareFrac();
  const vector<vector<int> > &see_hitIdx();
  const vector<vector<int> > &see_hitType();
  const vector<unsigned int> &see_offset();
  const vector<float> &vtx_x();
  const vector<float> &vtx_y();
  const vector<float> &vtx_z();
  const vector<float> &vtx_xErr();
  const vector<float> &vtx_yErr();
  const vector<float> &vtx_zErr();
  const vector<float> &vtx_ndof();
  const vector<float> &vtx_chi2();
  const vector<vector<int> > &vtx_trkIdx();
  const vector<int> &simvtx_event();
  const vector<int> &simvtx_bunchCrossing();
  const vector<unsigned int> &simvtx_processType();
  const vector<float> &simvtx_x();
  const vector<float> &simvtx_y();
  const vector<float> &simvtx_z();
  const vector<vector<int> > &simvtx_sourceSimIdx();
  const vector<vector<int> > &simvtx_daughterSimIdx();
  const vector<int> &simpv_idx();

  static void progress(int nEventsTotal, int nEventsChain);
};

#ifndef __CINT__
extern trktree trk;
#endif

namespace tas {
  const unsigned long long &event();
  const unsigned int &lumi();
  const unsigned int &run();
  const vector<float> &trk_px();
  const vector<float> &trk_py();
  const vector<float> &trk_pz();
  const vector<float> &trk_pt();
  const vector<float> &trk_inner_px();
  const vector<float> &trk_inner_py();
  const vector<float> &trk_inner_pz();
  const vector<float> &trk_inner_pt();
  const vector<float> &trk_outer_px();
  const vector<float> &trk_outer_py();
  const vector<float> &trk_outer_pz();
  const vector<float> &trk_outer_pt();
  const vector<float> &trk_eta();
  const vector<float> &trk_lambda();
  const vector<float> &trk_cotTheta();
  const vector<float> &trk_phi();
  const vector<float> &trk_dxy();
  const vector<float> &trk_dz();
  const vector<float> &trk_dxyPV();
  const vector<float> &trk_dzPV();
  const vector<float> &trk_dxyClosestPV();
  const vector<float> &trk_dzClosestPV();
  const vector<float> &trk_ptErr();
  const vector<float> &trk_etaErr();
  const vector<float> &trk_lambdaErr();
  const vector<float> &trk_phiErr();
  const vector<float> &trk_dxyErr();
  const vector<float> &trk_dzErr();
  const vector<float> &trk_refpoint_x();
  const vector<float> &trk_refpoint_y();
  const vector<float> &trk_refpoint_z();
  const vector<float> &trk_nChi2();
  const vector<float> &trk_nChi2_1Dmod();
  const vector<float> &trk_ndof();
  const vector<float> &trk_mva();
  const vector<int> &trk_q();
  const vector<unsigned int> &trk_nValid();
  const vector<unsigned int> &trk_nLost();
  const vector<unsigned int> &trk_nInactive();
  const vector<unsigned int> &trk_nPixel();
  const vector<unsigned int> &trk_nStrip();
  const vector<unsigned int> &trk_nOuterLost();
  const vector<unsigned int> &trk_nInnerLost();
  const vector<unsigned int> &trk_nOuterInactive();
  const vector<unsigned int> &trk_nInnerInactive();
  const vector<unsigned int> &trk_nPixelLay();
  const vector<unsigned int> &trk_nStripLay();
  const vector<unsigned int> &trk_n3DLay();
  const vector<unsigned int> &trk_nLostLay();
  const vector<unsigned int> &trk_nCluster();
  const vector<unsigned int> &trk_algo();
  const vector<unsigned int> &trk_originalAlgo();
  const vector<int> &trk_seedIdx();
  const vector<int> &trk_vtxIdx();
  const vector<vector<int> > &trk_simTrkIdx();
  const vector<vector<float> > &trk_simTrkShareFrac();
  const vector<vector<float> > &trk_simTrkNChi2();
  const vector<int> &trk_bestSimTrkIdx();
  const vector<int> &trk_bestFromFirstHitSimTrkIdx();
  const vector<float> &trk_bestSimTrkShareFrac();
  const vector<float> &trk_bestSimTrkShareFracSimDenom();
  const vector<float> &trk_bestSimTrkShareFracSimClusterDenom();
  const vector<float> &trk_bestSimTrkNChi2();
  const vector<float> &trk_bestFromFirstHitSimTrkShareFrac();
  const vector<float> &trk_bestFromFirstHitSimTrkShareFracSimDenom();
  const vector<float> &trk_bestFromFirstHitSimTrkShareFracSimClusterDenom();
  const vector<float> &trk_bestFromFirstHitSimTrkNChi2();
  const vector<vector<int> > &trk_hitIdx();
  const vector<vector<int> > &trk_hitType();
  const vector<int> &sim_event();
  const vector<int> &sim_bunchCrossing();
  const vector<int> &sim_pdgId();
  const vector<vector<int> > &sim_genPdgIds();
  const vector<int> &sim_isFromBHadron();
  const vector<float> &sim_px();
  const vector<float> &sim_py();
  const vector<float> &sim_pz();
  const vector<float> &sim_pt();
  const vector<float> &sim_eta();
  const vector<float> &sim_phi();
  const vector<float> &sim_pca_pt();
  const vector<float> &sim_pca_eta();
  const vector<float> &sim_pca_lambda();
  const vector<float> &sim_pca_cotTheta();
  const vector<float> &sim_pca_phi();
  const vector<float> &sim_pca_dxy();
  const vector<float> &sim_pca_dz();
  const vector<int> &sim_q();
  const vector<unsigned int> &sim_nValid();
  const vector<unsigned int> &sim_nPixel();
  const vector<unsigned int> &sim_nStrip();
  const vector<unsigned int> &sim_nLay();
  const vector<unsigned int> &sim_nPixelLay();
  const vector<unsigned int> &sim_n3DLay();
  const vector<unsigned int> &sim_nTrackerHits();
  const vector<unsigned int> &sim_nRecoClusters();
  const vector<vector<int> > &sim_trkIdx();
  const vector<vector<float> > &sim_trkShareFrac();
  const vector<vector<int> > &sim_seedIdx();
  const vector<int> &sim_parentVtxIdx();
  const vector<vector<int> > &sim_decayVtxIdx();
  const vector<vector<int> > &sim_simHitIdx();
  const vector<unsigned int> &pix_detId();
  const vector<vector<int> > &pix_trkIdx();
  const vector<vector<int> > &pix_seeIdx();
  const vector<vector<int> > &pix_simHitIdx();
  const vector<vector<float> > &pix_xySignificance();
  const vector<vector<float> > &pix_chargeFraction();
  const vector<float> &pix_x();
  const vector<float> &pix_y();
  const vector<float> &pix_z();
  const vector<float> &pix_xx();
  const vector<float> &pix_xy();
  const vector<float> &pix_yy();
  const vector<float> &pix_yz();
  const vector<float> &pix_zz();
  const vector<float> &pix_zx();
  const vector<float> &pix_radL();
  const vector<float> &pix_bbxi();
  const vector<unsigned int> &ph2_detId();
  const vector<vector<int> > &ph2_trkIdx();
  const vector<vector<int> > &ph2_seeIdx();
  const vector<vector<int> > &ph2_simHitIdx();
  const vector<vector<float> > &ph2_xySignificance();
  const vector<float> &ph2_x();
  const vector<float> &ph2_y();
  const vector<float> &ph2_z();
  const vector<float> &ph2_xx();
  const vector<float> &ph2_xy();
  const vector<float> &ph2_yy();
  const vector<float> &ph2_yz();
  const vector<float> &ph2_zz();
  const vector<float> &ph2_zx();
  const vector<float> &ph2_radL();
  const vector<float> &ph2_bbxi();
  const vector<unsigned int> &inv_detId();
  const vector<unsigned int> &simhit_detId();
  const vector<float> &simhit_x();
  const vector<float> &simhit_y();
  const vector<float> &simhit_z();
  const vector<float> &simhit_px();
  const vector<float> &simhit_py();
  const vector<float> &simhit_pz();
  const vector<int> &simhit_particle();
  const vector<float> &simhit_eloss();
  const vector<float> &simhit_tof();
  const vector<int> &simhit_simTrkIdx();
  const vector<vector<int> > &simhit_hitIdx();
  const vector<vector<int> > &simhit_hitType();
  const float &bsp_x();
  const float &bsp_y();
  const float &bsp_z();
  const float &bsp_sigmax();
  const float &bsp_sigmay();
  const float &bsp_sigmaz();
  const vector<float> &see_px();
  const vector<float> &see_py();
  const vector<float> &see_pz();
  const vector<float> &see_pt();
  const vector<float> &see_eta();
  const vector<float> &see_phi();
  const vector<float> &see_dxy();
  const vector<float> &see_dz();
  const vector<float> &see_ptErr();
  const vector<float> &see_etaErr();
  const vector<float> &see_phiErr();
  const vector<float> &see_dxyErr();
  const vector<float> &see_dzErr();
  const vector<float> &see_chi2();
  const vector<float> &see_statePt();
  const vector<float> &see_stateTrajX();
  const vector<float> &see_stateTrajY();
  const vector<float> &see_stateTrajPx();
  const vector<float> &see_stateTrajPy();
  const vector<float> &see_stateTrajPz();
  const vector<float> &see_stateTrajGlbX();
  const vector<float> &see_stateTrajGlbY();
  const vector<float> &see_stateTrajGlbZ();
  const vector<float> &see_stateTrajGlbPx();
  const vector<float> &see_stateTrajGlbPy();
  const vector<float> &see_stateTrajGlbPz();
  const vector<float> &see_stateCcov00();
  const vector<float> &see_stateCcov01();
  const vector<float> &see_stateCcov02();
  const vector<float> &see_stateCcov03();
  const vector<float> &see_stateCcov04();
  const vector<float> &see_stateCcov05();
  const vector<float> &see_stateCcov11();
  const vector<float> &see_stateCcov12();
  const vector<float> &see_stateCcov13();
  const vector<float> &see_stateCcov14();
  const vector<float> &see_stateCcov15();
  const vector<float> &see_stateCcov22();
  const vector<float> &see_stateCcov23();
  const vector<float> &see_stateCcov24();
  const vector<float> &see_stateCcov25();
  const vector<float> &see_stateCcov33();
  const vector<float> &see_stateCcov34();
  const vector<float> &see_stateCcov35();
  const vector<float> &see_stateCcov44();
  const vector<float> &see_stateCcov45();
  const vector<float> &see_stateCcov55();
  const vector<int> &see_q();
  const vector<unsigned int> &see_nValid();
  const vector<unsigned int> &see_nPixel();
  const vector<unsigned int> &see_nGlued();
  const vector<unsigned int> &see_nStrip();
  const vector<unsigned int> &see_nPhase2OT();
  const vector<unsigned int> &see_nCluster();
  const vector<unsigned int> &see_algo();
  const vector<int> &see_trkIdx();
  const vector<vector<int> > &see_simTrkIdx();
  const vector<vector<float> > &see_simTrkShareFrac();
  const vector<int> &see_bestSimTrkIdx();
  const vector<int> &see_bestFromFirstHitSimTrkIdx();
  const vector<float> &see_bestSimTrkShareFrac();
  const vector<float> &see_bestFromFirstHitSimTrkShareFrac();
  const vector<vector<int> > &see_hitIdx();
  const vector<vector<int> > &see_hitType();
  const vector<unsigned int> &see_offset();
  const vector<float> &vtx_x();
  const vector<float> &vtx_y();
  const vector<float> &vtx_z();
  const vector<float> &vtx_xErr();
  const vector<float> &vtx_yErr();
  const vector<float> &vtx_zErr();
  const vector<float> &vtx_ndof();
  const vector<float> &vtx_chi2();
  const vector<vector<int> > &vtx_trkIdx();
  const vector<int> &simvtx_event();
  const vector<int> &simvtx_bunchCrossing();
  const vector<unsigned int> &simvtx_processType();
  const vector<float> &simvtx_x();
  const vector<float> &simvtx_y();
  const vector<float> &simvtx_z();
  const vector<vector<int> > &simvtx_sourceSimIdx();
  const vector<vector<int> > &simvtx_daughterSimIdx();
  const vector<int> &simpv_idx();
}
#include "rooutil.h"
#endif
